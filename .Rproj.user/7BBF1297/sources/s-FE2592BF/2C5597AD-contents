library(rtweet)
library(tidytext)
library(magrittr)
library(dplyr)
library(tm)
library(ggplot2)
library(syuzhet)
library(plotly)
library(wordcloud)

# twitter api authoirsation 
# create_token(
# app = "sona2019_analysis",
# consumer_key = "xxx",
# consumer_secret = "xxx",
# access_token = "xxx",
# access_secret = "xxx")

# search twitter for relevant tweets
# tweets <- search_tweets(
#       "#SONA2019", n = 18000, include_rts = FALSE, lang = "en", retryonratelimit = TRUE)

# get text only from tweets
# tweets.df <- tweets %>% 
#              select(text)

# write.csv(tweets.df, file = "sona_tweets.csv")

tweets.df <- read.csv("sona2019.csv", stringsAsFactors = FALSE, row.names = 1)

# Write a function to clean the tweets
clean.tweets <- function(doc) {
  doc <- gsub("http.*","",  doc)
  doc <- gsub("https.*","", doc)
  doc <- gsub("#.*","",doc)
  doc <- gsub("@.*","",doc)
  doc <- gsub("[[:punct:]]", "", doc)
  doc <- gsub("rt", "", doc)
  doc <- gsub("^ ", "", doc)
  doc <- iconv(doc, "UTF-8", "ASCII", sub="")
  return(doc)
}

# Apply function
tweets.df <- sapply(tweets.df, clean.tweets)

# Convert all words to lower case
tweets.df <- sapply(tweets.df, tolower)


# Perform sentiment analysis using the syuzhet library
allemotions <- get_nrc_sentiment(tweets.df)

# Create a variable with just the positive and negative emotions
sona_posneg <- allemotions %>%
               select("positive", "negative")

# Create a dataframe that summarises sentiment in descending order
posneg_bar <- colSums(sona_posneg) 
posneg_sum <- data.frame(count = posneg_bar, sona_posneg = names(posneg_bar))
posneg_sum$sona_posneg <- factor(posneg_sum$sona_posneg, 
                                 levels = posneg_sum$sona_posneg[order(posneg_sum$count, decreasing = TRUE)])

library(plotly)

posneg_plot <- plot_ly(posneg_sum,
                        x = ~sona_posneg, 
                        y = ~count, 
                        type = "bar", 
                        color = ~sona_posneg) %>%
                        layout (xaxis = list(title = ""),
                        showlegend = FALSE,
                        title = "Twitter Sentiment Analysis for #SONA2019")
posneg_plot

# Create variable with a spectrum of emotions 
sona_emotions <- allemotions %>%
                 select("trust", "anticipation", "fear", "joy", "anger", "sadness", "surprise", "disgust")

# Create a dataframe that displays sentiment in descending order
emotion_bar <- colSums(sona_emotions) 
emotion_sum <- data.frame(count = emotion_bar, sona_emotions = names(emotion_bar))
emotion_sum$sona_emotions <- factor(emotion_sum$sona_emotions, 
                                    levels = emotion_sum$sona_emotions[order(emotion_sum$count, decreasing = TRUE)])

# visualise the emotions from NRC sentiments

library(plotly)

emotion_plot <- plot_ly(emotion_sum,
                x = ~sona_emotions, 
                y = ~count, 
                type = "bar", 
                color = ~sona_emotions) %>%
                layout (xaxis = list(title = ""), 
                showlegend = FALSE,
                title = "Twitter Sentiment Analysis for #SONA2019")

emotion_plot

# Create wordcloud showing key positive and negative words

# Wordcloud data for cloud comparison

posneg_wordcloud = c(
  paste(tweets.df[allemotions$positive > 0], collapse=" "),
  paste(tweets.df[allemotions$negative > 0], collapse=" ")
)

# Create corpus for text mining 

corpus = Corpus(VectorSource(posneg_wordcloud))

# Convert to lower case, remove punctuation and stopwords 

# corpus = tm_map(corpus, tolower)
# corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, c(stopwords("english")))

# Create document term matrix

tdm = TermDocumentMatrix(corpus)

# Convert as matrix
tdm = as.matrix(tdm)
tdmnew <- tdm[nchar(rownames(tdm)) < 11,]

# Column name binding
colnames(tdm) <- c("positive", "negative")
colnames(tdmnew) <- colnames(tdm)
comparison.cloud(tdmnew, random.order=FALSE,
                 colors = c("blue", "red"),
                 title.size = 1,
                 max.words = 250, 
                 scale = c(2.5, 0.4),
                 rot.per = 0.4)

# Lets look at trust and fear

# Wordcloud data for cloud comparison
trustfear_wordcloud = c(
  paste(tweets.df[allemotions$trust > 0], collapse=" "),
  paste(tweets.df[allemotions$fear > 0], collapse=" ")
)

# Create corpus for text mining 
corpus2 = Corpus(VectorSource(trustfear_wordcloud))

# Convert to lower case, remove punctuation and stopwords 

corpus2 = tm_map(corpus2, tolower)
corpus2 = tm_map(corpus2, removePunctuation)
corpus2 = tm_map(corpus2, removeWords, c(stopwords("english")))

# Create document term matrix

tdm2 = TermDocumentMatrix(corpus2)

# Convert as matrix
tdm2 = as.matrix(tdm)
tdmnew2 <- tdm2[nchar(rownames(tdm2)) < 11,]

# Column name binding
colnames(tdm2) <- c("trust", "fear")
colnames(tdmnew2) <- colnames(tdm2)

# Plot comparison wordcloud 
comparison.cloud(tdmnew2, random.order=FALSE,
                 colors = c("teal", "orange"),
                 title.size = 1,
                 max.words = 250, 
                 scale = c(2.5, 0.4),
                 rot.per = 0.4)


# Remove words that bias results

tweets.df2 <- sapply(tweets.df, tolower)

# Perform sentiment analysis using the syuzhet library
allemotions2 <- get_nrc_sentiment(tweets.df2)

sona_emotions2 <- allemotions2 %>%
  select("positive", "negative", "trust", "anticipation", "fear", "joy", "anger", "sadness", "surprise", "disgust")

# Create a dataframe that displays sentiment in descending order
emotion_bar2 <- colSums(sona_emotions2) 
emotion_sum2 <- data.frame(count = emotion_bar2, sona_emotions2 = names(emotion_bar2))
emotion_sum2$sona_emotions2 <- factor(emotion_sum2$sona_emotions2, 
                                      levels = emotion_sum2$sona_emotions2[order(emotion_sum2$count, decreasing = TRUE)])

library(plotly)

emotion_plot2 <- plot_ly(emotion_sum2,
                         x = ~sona_emotions2, 
                         y = ~count, 
                         type = "bar", 
                         color = ~sona_emotions2) %>%
                         layout (xaxis = list(title = ""), 
                         showlegend = FALSE,
                         title = "Twitter Sentiment Analysis for #SONA2019")
emotion_plot2




# load stopword data from tidytext
#data("stop_words")

# create list of undesireable words 
#undesirable_words <- c("south", "africa", "sona2019", "ramaphosa", "president", 
#                      "cyril", "eff", "anc", "da", "cope", "sona19", "speech", "2019")

# remove stop words and undesirable words
#sona_tweets <- tweets.df %>%
#  dplyr::select(text) %>%
#  unnest_tokens(word, text) %>%
#  anti_join(stop_words) %>%
#  distinct() %>%  
#  filter(!word %in% undesirable_words) %>%
#  filter(nchar(word) > 3)

